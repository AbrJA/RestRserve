% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RestRserveApplication.R
\docType{data}
\name{RestRserveApplication}
\alias{RestRserveApplication}
\title{Creates RestRserveApplication.}
\format{\code{\link{R6Class}} object.}
\usage{
RestRserveApplication
}
\description{
Creates RestRserveApplication object.
RestRserveApplication facilitates in turning user-supplied R code into high-performance REST API by
allowing to easily register R functions for handling http-requests.
}
\section{Usage}{

\itemize{
\item \code{app = RestRserveApplication$new()}
\item \code{app$add_endpoint(path = "/echo", method = "GET", FUN =  function(request) {
  RestRserve::create_response(payload = request$query_vector[[1]], content_type = "text/plain")
  })}
\item \code{app$routes()}
}
For usage details see \bold{Methods, Arguments and Examples} sections.
}

\section{Methods}{

\describe{
  \item{\code{$new()}}{Constructor for RestRserveApplication. For the moment doesn't take any parameters.}
  \item{\code{$add_endpoint(path, method, FUN)}}{Adds endpoint and register user-supplied R function as a handler.
  user function \bold{must} return object of the class \bold{"RestRserveResponse"} which can be easily constructed with
  \link{create_response}}
  \item{\code{$call_handler(request, path)}}{Used internally, \bold{usually users} don't need to call it.
  Calls handler function for a given request and path.}
  \item{\code{$routes()}}{Lists all registered routes}
  \item{\code{$check_path_exists(path)}}{Mainly for internal usage.
  Returns TRUE/FALSE if path registered / not registered}
  \item{\code{$check_path_method_exists(path, method)}}{Mainly for internal usage.
  Returns TRUE/FALSE path-method pair registered / not registered}
}
}

\section{Arguments}{

\describe{
 \item{app}{A \code{RestRserveApplication.} object}
 \item{path}{\code{character} of length 1. Should be valid path for example \code{'/a/b/c'}}
 \item{method}{\code{character} of length 1. At the moment one of \code{"GET", "POST", "HEAD"} }
 \item{FUN}{\code{function} which takes exactly one argument - \code{request}.
   \code{request} R object returned by \code{RestRserve:::parse_request()} function.
   Object corresponds to http-request and essentially \code{request} is a \code{list} with a fixed set of fields.
   Representation of the "GET" request to "http://localhost:8001/somemethod?a=1&b=2" will look like:
   \describe{
      \item{uri}{ = \code{"/somemethod"}, always character of length 1}
      \item{method}{ = \code{"GET"}, always character of length 1}
      \item{query_vector}{ = \code{c("a" = "1", "b" = "2")}, character vector}
      \item{content_type}{ = \code{""}, always character of length 1}
      \item{content_length}{ = \code{0L}, always integer of length 1}
      \item{body}{ = \code{NULL}.
         \itemize{
            \item \code{NULL} if the http body is empty or zero length.
            \item \code{raw vector} with a "content-type" attribute in all cases except URL encoded form (if specified in the headers)
            \item named \code{characeter vector} in the case of a URL encoded form.
            It will have the same shape as the query string (named string vector)
         }
      }
      \item{client_ip}{ = \code{"0.0.0.0"}, always character of length 1}
      \item{raw_cookies}{ = \code{""}, always character of length 1}
   }
 }
}
}

\examples{
echo_handler = function(request) {
 RestRserve::create_response(payload = request$query_vector[[1]],
                             content_type = "text/plain",
                            headers = "Location: /echo",
                            status_code = 201L)
}
app = RestRserveApplication$new()
app$add_endpoint(path = "/echo", method = "GET", FUN = echo_handler)
req = list(query_vector = c("a" = "2"), method = "GET")
answer = app$call_handler(request = req, path = "/echo")
answer$payload
# "2"
}
\keyword{datasets}
